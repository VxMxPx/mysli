#!/usr/bin/php
<?php

namespace Mysli\Installer;

function print_intro()
{
    echo "\n",
         'Mysli Installer', "\n\n",
         'Usage:', "\n",
         '  installer <CORE_NAME> <LIBRARIES_PATH> <PUBLIC_PATH> <PRIVATE_PATH>', "\n\n",
         '  CORE_NAME:      The name of the core you want to use, in a format: ', "\n",
         '                  vendor/core, e.g. mysli/core', "\n",
         '  LIBRARIES_PATH: The relative or absolute path to the libraries, ', "\n",
         '                  by default in folder ../mysli', "\n",
         '  PUBLIC_PATH:    The relative or absolute public path,', "\n",
         '                  that\'s where URL accessible assets will be stored.', "\n",
         '  PRIVATE_PATH:   The relative or absolute private path, that\'s the path ', "\n",
         '                  where all private data will be saved.', "\n";
}

function print_line($line)
{
    echo "{$line}\n";
}

// All 5 of arguments are required.
if (count($_SERVER['argv']) !== 5) {
    print_intro();
    exit(1);
}

// Assign all arguments
list( , $core, $libpath, $pubpath, $datpath) = $_SERVER['argv'];

// Check if we can find common.php
if (!file_exists(__DIR__ . DIRECTORY_SEPARATOR . 'common.php')) {
    echo 'ERROR: Cannot find common.php in: ' . __DIR__;
    exit(1);
}
include __DIR__ . DIRECTORY_SEPARATOR . 'common.php';

// Resolve library path
$libpath = resolve_path($libpath . DIRECTORY_SEPARATOR . 'lib', __DIR__ . DIRECTORY_SEPARATOR);
$libpath = $libpath[0];

// Construct core setup
print_line('Locating setup for core: ' . $core);
$setup_file = realpath($libpath . DIRECTORY_SEPARATOR . $core . DIRECTORY_SEPARATOR . 'setup.php');
if (!file_exists($setup_file)) {
    print_line('Cannot find setup file.');
    exit(1);
}
include $setup_file;
$core_arr = explode('/', $core);
$class_name = to_camelcase($core_arr[0]) . '\\' . to_camelcase($core_arr[1]) . '\\' . 'Setup';
if (!class_exists($class_name, false)) {
    print_line('Cannot find setup class: ' . $class_name);
    exit(1);
}

// Resolve paths (possibly again)
$pubpath = resolve_path($pubpath, __DIR__ . DIRECTORY_SEPARATOR);
$pubpath = $pubpath[1] ? implode('', $pubpath) : $pubpath[0];
$datpath = resolve_path($datpath, __DIR__ . DIRECTORY_SEPARATOR);
$datpath = $datpath[1] ? implode('', $datpath) : $datpath[0];

print_line('Setup class was found: ' . $class_name);
$setup = new $class_name([
    'pubpath' => $pubpath,
    'libpath' => $libpath,
    'datpath' => $datpath
]);
if (!method_exists($setup, 'before_enable')) {
    print_line('Method was not found: before_enable');
    exit(1);
}

if (!$setup->before_enable()) {
    print_line('Error when enabling core!');
    exit(1);
}

print_line('Core was successfully enabled.');
$setup->after_enable();

// Construct Core
print_line('Locating main core file: ' . $core);
$core_file = realpath($libpath . DIRECTORY_SEPARATOR . $core . DIRECTORY_SEPARATOR . 'core.php');
if (!file_exists($core_file)) {
    print_line('Cannot find core file.');
    exit(1);
}
include $core_file;
$core_class_name = to_camelcase($core_arr[0]) . '\\' . to_camelcase($core_arr[1]);
if (!class_exists($core_class_name, false)) {
    print_line('Cannot find core class: ' . $core_class_name);
    exit(1);
}
$core = new $core_class_name($pubpath, $libpath, $datpath);
$dot_lib = $core->librarian->resolve('*/dot');
$dot_dependencies = $core->librarian->get_dependencies($dot_lib);
if (!empty($dot_dependencies['missing']) || !empty($dot_dependencies['disabled'])) {
    print_line('Cannot enable DOT libraray. Command line interface will not be available.');
    exit(6);
}
// Deal with the setup...
$setup = $core->librarian->construct_setup($dot_lib);
if (!$setup->before_enable()) {
    print_line('Setup for DOT failed.');
    exit(6);
}
if (!$core->librarian->enable($dot_lib)) {
    $setup->after_enable();
    print_line('Failed to enable DOT.');
    exit(6);
} else {
    print_line('DOT was successfully enabled.');
}

exit(0);
