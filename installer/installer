#!/usr/bin/php
<?php

namespace Mysli\Installer;

function print_intro()
{
    echo "\n",
         'Mysli Installer', "\n\n",
         'Usage:', "\n",
         '  installer <CORE_NAME> <LIBRARIES_PATH> <PUBLIC_PATH> <PRIVATE_PATH>', "\n\n",
         '  CORE_NAME:      The name of the core you want to use, in a format: ', "\n",
         '                  vendor/core, e.g. mysli/core', "\n",
         '  LIBRARIES_PATH: The relative or absolute path to the libraries, ', "\n",
         '                  by default in folder ../mysli', "\n",
         '  PUBLIC_PATH:    The relative or absolute public path,', "\n",
         '                  that\'s where URL accessible assets will be stored.', "\n",
         '  PRIVATE_PATH:   The relative or absolute private path, that\'s the path ', "\n",
         '                  where all private data will be saved.', "\n";
}

function print_line($line)
{
    echo "{$line}\n";
}

// All 5 of arguments are required.
if (count($_SERVER['argv']) !== 5) {
    print_intro();
    exit(1);
}

// Assign all arguments
list( , $core, $libpath, $pubpath, $datpath) = $_SERVER['argv'];

// Check if we can find common.php
if (!file_exists(__DIR__ . DIRECTORY_SEPARATOR . 'common.php')) {
    echo 'ERROR: Cannot find common.php in: ' . __DIR__;
    exit(1);
}
include __DIR__ . DIRECTORY_SEPARATOR . 'common.php';

// Resolve library path
$libpath = resolve_path($libpath . DIRECTORY_SEPARATOR . 'lib', __DIR__ . DIRECTORY_SEPARATOR);
$libpath = $libpath[0];

// Construct core setup
print_line('Locating setup for core: ' . $core);
$setup_file = realpath($libpath . DIRECTORY_SEPARATOR . $core . DIRECTORY_SEPARATOR . 'setup.php');
if (!file_exists($setup_file)) {
    print_line('Cannot find setup file.');
    exit(1);
}
include $setup_file;
$core_arr = explode('/', $core);
$class_name = to_camelcase($core_arr[0]) . '\\' . to_camelcase($core_arr[1]) . '\\' . 'Setup';
if (!class_exists($class_name, false)) {
    print_line('Cannot find setup class: ' . $class_name);
    exit(1);
}

// Resolve paths (possibly again)
$pubpath = resolve_path($pubpath, __DIR__ . DIRECTORY_SEPARATOR);
$pubpath = $pubpath[1] ? implode('', $pubpath) : $pubpath[0];
$datpath = resolve_path($datpath, __DIR__ . DIRECTORY_SEPARATOR);
$datpath = $datpath[1] ? implode('', $datpath) : $datpath[0];

print_line('Setup class was found: ' . $class_name);
$setup = new $class_name($pubpath, $libpath, $datpath);
if (!method_exists($setup, 'before_enable')) {
    print_line('Method was not found: before_enable');
    exit(1);
}

if ($setup->before_enable()) {
    print_line('Core was successfully enabled.');
    exit(0);
} else {
    print_line('Error when enabling core!');
    exit(1);
}

exit(1);






















$dot_basic = new DotBasic(__DIR__, $_SERVER['argv']);
$dot_basic->exec();






























class DotBasic
{
    protected $command;
    protected $arguments;
    protected $libpath;

    public function __construct($libpath, array $arguments)
    {
        $this->libpath = rtrim($libpath, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
        $this->command = isset($arguments[1]) ? strtolower($arguments[1]) : false;
        $this->arguments = array_slice($arguments, 2);
    }

    public function exec()
    {
        if (!$this->command || !in_array($this->command, ['create', 'open'])) {
            $this->intro();
        } else {
            if ($this->command === 'create') {
                if (count($this->arguments) !== 3) {
                    $arguments = $this->create_interactive();
                } else {
                    $arguments = $this->arguments;
                }
                if ($this->create($arguments[0], $arguments[1], $arguments[2])) {
                    if (count($this->arguments) !== 3) {
                        if (DotUtil::confirm('Should I open the project?')) {
                            $this->open($arguments[1], $arguments[2]);
                        }
                    }
                }
            } elseif ($this->command === 'open') {
                if (count($this->arguments) !== 2) {
                    $arguments = $this->open_interactive();
                } else {
                    $arguments = $this->arguments;
                }
                $this->open($arguments[0], $arguments[1]);
            }
        }
    }



    public function find_core()
    {
        $vendors = scandir($this->libpath);
        $cores   = [];
        if (!is_array($vendors)) {
            DotUtil::error('No libraries in folder: ' . $this->libpath);
            exit(__LINE__);
        }
        foreach ($vendors as $vendor) {
            if (substr($vendor, 0, 1) === '.') continue;
            if (!is_dir($this->libpath . $vendor)) continue;
            $libraries = scandir($this->libpath . $vendor);
            if (!is_array($libraries)) continue;
            foreach ($libraries as $library) {
                if ($library === 'core') {
                    $cores[] = $vendor . '/' . $library;
                }
            }
        }

        return $cores;
    }

    protected function ask_for_path()
    {
        return DotUtil::input('>> ', function ($path) {
            $path = $this->resolve_path($path);
            if (!$path[0]) {
                DotUtil::warn('Invalid path!');
                return false;
            }
            // if (!$path[1] && count(scandir($path[0])) > 2) {
            //     DotUtil::warn('The directory is not empty, all data will be erased.');
            //     $answer = DotUtil::input('Continue? [Y/n] ', function ($answer) {
            //         $answer = strtolower($answer);
            //         if ($answer === 'y' || empty($answer)) return true;
            //         if ($answer === 'n') return false;
            //         return null;
            //     });
            // } else
            if ($path[1]) {
                DotUtil::warn('The directory will be created: ' . $path[1]);
            }
            return $path[1] ? implode('', $path) : $path[0];
        });
    }

    public function open_interactive()
    {
        DotUtil::plain('Please enter project\'s  public path.');
        $pubpath = DotUtil::input('>> ', function ($path) {
            $path = $this->resolve_path($path);
            $path = $path[0];
            if (!is_dir($path)) {
                DotUtil::warn('Invalid path: ' . $path);
                return null;
            }
            if (!file_exists($path . 'index.php')) {
                DotUtil::warn('Cannot find index.php in: ' . $path);
                return null;
            }
            DotUtil::success('Selected public path is: ' . $path);
            return $path;
        });
        DotUtil::plain('Please enter project\'s data path.');
        $datpath = DotUtil::input('>> ', function ($path) {
            $path = $this->resolve_path($path);
            $path = $path[0];
            if (!is_dir($path)) {
                DotUtil::warn('Invalid path: ' . $path);
                return null;
            }
            if (!file_exists($path . 'core' . DIRECTORY_SEPARATOR . 'libraries.json')) {
                DotUtil::warn('Cannot find core/libraries.json in: ' . $path);
                return null;
            }
            DotUtil::success('Selected data path is: ' . $path);
            return $path;
        });
        return [$pubpath, $datpath];
    }



    public function open($pubpath, $datpath)
    {
        // Resolve paths (possibly again)
        $pubpath = $this->resolve_path($pubpath);
        $pubpath = $pubpath[1] ? implode('', $pubpath) : $pubpath[0];
        $datpath = $this->resolve_path($datpath);
        $datpath = $datpath[1] ? implode('', $datpath) : $datpath[0];

        // Find and Construct the appropriate core
        // DotUtil::exec();
    }

    public function create($core, $pubpath, $datpath)
    {

    }
}
