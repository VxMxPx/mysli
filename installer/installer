#!/usr/bin/env php
<?php

define('MYSLI_INSTALLER_VERSION', 1);

function print_intro()
{
    $intro = "
Mysli Installer (v" . MYSLI_INSTALLER_VERSION . ")

Usage: ./installer [OPTIONS]...

  -l, --libpath <name>   Path where the libraries are. The default is: ../mysli
  -p, --pubpath <name>   Public / URL accessible path (where to put index.php).
                         The default is: ../public
  -d, --datpath <name>   Data / private path (where configuration and databases
                         will be stored. Should not be URL accessible).
                         The default is: ../private
  -r, -rewrite <options> Rewrite core libraries, in format: role:vendor\lib,...
                         The default values are:
                         benchmark:mysli/benchmark,config:mysli/config,
                         core:mysli/core,cli:mysli/dot,
                         error_handler:mysli/error_handler,event:mysli/event,
                         librarian:mysli/librarian,logger:mysli/logger

  -y                     Assume `yes` as an answer to all questions.
  -h, --help             Print this help.

";
    fwrite(STDOUT, $intro);
}

function print_line($line)
{
    fwrite(STDOUT, $line . PHP_EOL);
}

function print_line_and_die($line)
{
    print_line('!!ERROR: ' . $line);
    die(0);
}

function get_opt_val($data, $short, $long, $default)
{
    if (!is_array($data))     return $default;
    if ($short && isset($data[$short])) return $data[$short];
    if ($long  && isset($data[$long]))  return $data[$long];
    return $default;
}

// Return array as a string, in following format
// key      : value
// long_key : value
function nice_array(array $input)
{
    $lkey = 0;
    $out  = '';
    // Get the longes key...
    foreach ($input as $key => $val) {
        if (strlen($key) > $lkey) {
            $lkey = strlen($key);
        }
    }

    foreach ($input as $key => $value) {
        $out .= $key . str_repeat(' ', $lkey - strlen($key)) . ' : ' . $value . "\n";
    }

    return $out;
}

// Check if we can find common.php
if (!file_exists(__DIR__ . DIRECTORY_SEPARATOR . 'common.php')) {
    print_line_and_die('Cannot find common.php in: ' . __DIR__);
}
include __DIR__ . DIRECTORY_SEPARATOR . 'common.php';

// Get cli parameters...
$short = 'l:p:d:r:hy';
$long  = ['libpath:', 'pubpath:', 'datpath:', 'rewrite:', 'help'];
$options = getopt($short, $long);

// Do we have help request?
if (get_opt_val($options, 'h', 'help', 'not') !== 'not') {
    print_intro();
    exit(0);
}

// Get libpath
$libraries = [
    'benchmark'     => 'mysli/benchmark',
    'config'        => 'mysli/config',
    'core'          => 'mysli/core',
    'cli'           => 'mysli/dot',
    'error_handler' => 'mysli/error_handler',
    'event'         => 'mysli/event',
    'librarian'     => 'mysli/librarian',
    'logger'        => 'mysli/logger'
];
$is_yes  = !get_opt_val($options, 'y', false, true); // Need to invert it
$libpath = get_opt_val($options, 'l', 'libpath', '../mysli');
$pubpath = get_opt_val($options, 'p', 'pubpath', '../public');
$datpath = get_opt_val($options, 'd', 'datpath', '../private');
$rewrite = get_opt_val($options, 'r', 'rewrite', '');
$rewrite = explode(',', $rewrite);
foreach ($rewrite as $rw_item) {
    $rw_item = explode(':', $rw_item);
    if (!isset($rw_item[1])) continue;
    $role = trim($rw_item[0]);
    $lib  = trim($rw_item[1]);
    if (!isset($libraries[$role])) continue;
    $libraries[$role] = $lib;
}

// Absolute full path is needed; if relative path was provided,
// it needs to be resolved!

// Resolve paths
$libpath = resolve_path(dst($libpath, 'lib'), __DIR__ . DIRECTORY_SEPARATOR);
if ($libpath[1]) print_line_and_die('Library path is invalid.');
$libpath = $libpath[0];

$pubpath = resolve_path($pubpath, __DIR__ . DIRECTORY_SEPARATOR);
$pubpath = $pubpath[1] ? implode('', $pubpath) : $pubpath[0];

$datpath = resolve_path($datpath, __DIR__ . DIRECTORY_SEPARATOR);
$datpath = $datpath[1] ? implode('', $datpath) : $datpath[0];

// Ask if all seems ok...
print_line('Review before setup:');
print_line(null);
print_line('--- Paths ---');
print_line('Public    ' . $pubpath);
print_line('Private   ' . $datpath);
print_line('Libraries ' . $libpath);
print_line(null);
print_line('--- List of libraries to enable ---');
print_line(nice_array($libraries));

if (!$is_yes) {
    fwrite(STDOUT, 'Proceed? [Y/n] ');
    $answer = fread(STDIN, 1);
    if (!in_array(strtolower(trim($answer)), ['y', '']))
        print_line_and_die('You selected `no`! See you latter....');
}

// Validate data...
if (!file_exists($libpath))
    print_line_and_die('Cannot continue, libraries path is not valid: ' . $libpath);

$missing = [];
foreach ($libraries as $role => $lib)
    if (!file_exists(dst($libpath, $lib)))
        $missing[$lib] = dst($libpath, $lib);

if (!empty($missing))
    print_line_and_die("Libraries not found:\n" . nice_array($missing));

// Enable the core library...
if ( ! ($core = enable_core($libraries['core'], $pubpath, $libpath, $datpath, 'print_line_and_die')) ) {
    print_line('Core was successfully enabled.');
}

// Enable the librarian...
if ( ! ($librarian = enable_librarian($libraries['librarian'], $libpath, 'print_line_and_die')) ) {
    print_line('Librarian was successfully enabled.');
}

// Librarian add core
$librarian->enable($libraries['core']);
lib_enable($librarian, $libraries['config'], 'print_line_and_die');
lib_enable($librarian, $libraries['cli'], 'print_line_and_die');
lib_enable($librarian, $libraries['benchmark'], 'print_line_and_die');
lib_enable($librarian, $libraries['event'], 'print_line_and_die');
lib_enable($librarian, $libraries['logger'], 'print_line_and_die');
lib_enable($librarian, $libraries['error_handler'], 'print_line_and_die');

die(0);














// Construct core setup
print_line('Locating setup for core: ' . $core);
$setup_file = realpath(dst($libpath, $core, 'setup.php'));
if (!file_exists($setup_file)) {
    print_line('Cannot find setup file: ' . $setup_file);
    exit(1);
}
include $setup_file;
$core_arr = explode('/', $core);
$class_name = to_camelcase($core_arr[0]) . '\\' . to_camelcase($core_arr[1]) . '\\' . 'Setup';
if (!class_exists($class_name, false)) {
    print_line('Cannot find setup class: ' . $class_name);
    exit(1);
}



print_line('Setup class was found: ' . $class_name);
$setup = new $class_name([
    'pubpath' => $pubpath,
    'libpath' => $libpath,
    'datpath' => $datpath
]);
if (!method_exists($setup, 'before_enable')) {
    print_line('Method was not found: before_enable');
    exit(1);
}

if (!$setup->before_enable()) {
    print_line('Error when enabling core!');
    exit(1);
}

print_line('Core was successfully enabled.');
$setup->after_enable();

// Construct Core
print_line('Locating main core file: ' . $core);
$core_file = realpath(dst($libpath, $core, 'core.php'));
if (!file_exists($core_file)) {
    print_line('Cannot find core file: ' . $core_file);
    exit(1);
}
include $core_file;
$core_class_name = to_camelcase($core_arr[0]) . '\\' . to_camelcase($core_arr[1]);
if (!class_exists($core_class_name, false)) {
    print_line('Cannot find core class: ' . $core_class_name);
    exit(1);
}
$core = new $core_class_name($pubpath, $libpath, $datpath);
$dot_lib = $core->librarian->resolve('*/dot');
$dot_dependencies = $core->librarian->get_dependencies($dot_lib);
if (!empty($dot_dependencies['missing']) || !empty($dot_dependencies['disabled'])) {
    print_line('Cannot enable DOT libraray. Command line interface will not be available.');
    exit(6);
}
// Deal with the setup...
$setup = $core->librarian->construct_setup($dot_lib);
if (!$setup->before_enable()) {
    print_line('Setup for DOT failed.');
    exit(6);
}
if (!$core->librarian->enable($dot_lib)) {
    $setup->after_enable();
    print_line('Failed to enable DOT.');
    exit(6);
} else {
    print_line('DOT was successfully enabled.');
}

exit(0);
