#!/usr/bin/env php
<?php

namespace mysli;

const VERSION = '1.r151230';

/**
 * Run Mysi Command Line. Note the self-execution.
 * --
 * @return void
 */
function __run()
{
    /*
    Report all errors.
     */
    error_reporting(E_ALL);

    /*
    Display all errors.
     */
    ini_set('display_errors', true);

    /*
    Initialize Arguments and Command
     */
    $args = $_SERVER['argv'];

    /*
    Resolve global arguments
     */
    foreach (get_variables() as $garg => list($garg_def, $_))
    {
        if (in_array($garg, $args))
        {
            // unset($args[ array_search($garg, $args) ]);
            array_splice($args, array_search($garg, $args), 1);
            define($garg_def, true);
        }
        else
        {
            define($garg_def, false);
        }
    }

    $command = isset($args[1]) ? $args[1] : false;

    /*
    Preform self-test (PHP version, required libraries, ...)
    And print warnings/errors/success
     */
    log_debug("About to preform Mysli self-test...");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    $messages = self_test();

    if (!empty($messages))
    {
        foreach ($messages as $message)
        {
            log_error($message);
            # ~~~~~~~~~~~~~~~~~~
        }

        exit(1);
    }

    /*
    Discover Paths and SafeMode.
     */

    // LOC filename
    $loc = 'mysli.loc.php';

    // Get current working directory
    $cwd = rtrim(getcwd(), '\\/');

    // Set safe mode to false
    // Safe mode is situation when System is NOT initialized.
    // Either `mysli` is called from bin or from an empty directory.
    $safemode = true;

    // Apppath is CWD
    $apppath = $cwd;

    // Full current CWD to be cut down...
    $fcwd = $cwd;

    // Using CWD, Check if LOC exists anywhere down the line...
    log_debug("Looking for LOC.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    do
    {
        log_debug("... {$fcwd}/{$loc}");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        // Try to find LOC in any sub-directory...
        if (file_exists("{$fcwd}/{$loc}"))
        {
            log_debug("FOUND!");
            # ~~~~~~~~~~~~~~~~~~
            $safemode = false;
            $apppath = $fcwd;
            break;
        }

        $fcwd = dirname($fcwd);

    } while(strlen($fcwd) > 3);

    // Check if it's safe mode.
    // In such case only internal commands can be called.
    if ($safemode || $command === '--self')
    {
        log_debug('Will initialize --self.');
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        init_self($apppath, $command, $args);
    }
    else
    {
        log_debug('Will initialize toolkit.');
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        init_toolkit($apppath, $loc, $args);
    }
}

__run();

/*
--- Init -----------------------------------------------------------------------
 */

/**
 * Initialize internal command.
 * --
 * @param string $apppath
 * @param string $command
 * @param array  $args
 */
function init_self($apppath, $command, array $args)
{
    // Define help messages
    $help =
        "Command Line for Mysli Platform\n\n".
        "If you'd like to mange initialized application, please execute `mysli` ".
        "from root directory of that application.\n\n".
        "Usage: mysli --self <command> [options...]\n\n".
        "You can always use mysli <command> -h to get help for a specific command.\n\n".
        "Please note, this is a safe mode, only commands which are related ".
        "to this utility are available.\n\n".
        "List of available commands:\n\n".
        "{commands}\n\n".
        "List of available settings:\n\n".
        "{settings}\n";

    if ($command === '--self')
    {
        $command = isset($args[2]) ? $args[2] : null;
    }

    // If there's no command, or command is -h or --help, display help
    if (!$command || $command === '-h' || $command === '--help')
    {
        log_info(
            str_replace(
                [
                    '{commands}',
                    '{settings}'
                ],
                [
                    format_commands(get_commands()),
                    format_commands(get_variables())
                ],
                $help
            )
        );
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        exit(0);
    }

    // Check if script exists.
    $commands = get_commands();
    if (!isset($commands['--self '.$command]))
    {
        log_warning("Invalid command! Use `-h` to see list available commands");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        exit(1);
    }

    // Prepare arguments
    $args = array_slice($args, 3);

    // Apppath needs to be set!
    if (!in_array('--apppath', $args))
    {
        array_unshift($args, '--apppath', $apppath);
    }

    log_debug("Will execute: `\\mysli\\smexec_{$command}`.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    $r = call_user_func("\\mysli\\smexec_{$command}", $args);

    print("\n");

    exit($r ? 0 : 1);
}

/**
 * Initialize Toolkit.
 * --
 * @param string $apppath
 * @param string $loc
 * @param array  $args
 */
function init_toolkit($apppath, $loc, array $args)
{
    // Set directory separator
    $DS = DIRECTORY_SEPARATOR;

    log_debug("Read loc file");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~
    include "{$apppath}{$DS}{$loc}";

    // There should be couple of constants available now, with relative paths.
    // From those we can load the toolkit and boot the system.

    log_debug('Check if all paths are defined.');
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if (!defined('MYSLI_LOC_BINPATH'))
    {
        panic(
            "Binary path not defined! `MYSLI_LOC_BINPATH`. ".
            "Check `mysli.loc.php` file."
        );
    }

    if (!defined('MYSLI_LOC_PUBPATH'))
    {
        panic(
            "Public path not defined! `MYSLI_LOC_PUBPATH`. ".
            "Check `mysli.loc.php` file."
        );
    }

    // Set PUBPATH
    $pubpath = realpath($apppath.$DS.MYSLI_LOC_PUBPATH);
    log_debug("Public path: `{$pubpath}`.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if (!$pubpath)
    {
        panic(
            "Public path not found in: `{$apppath}` looking for: `".
            MYSLI_LOC_PUBPATH."`."
        );
    }

    // Set BINPATH
    $binpath = realpath($apppath.$DS.MYSLI_LOC_BINPATH);
    log_debug("BIN path: `{$binpath}`.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if (!$binpath)
    {
        panic(
            "Binary path not found in: `{$apppath}` looking for: `".
            MYSLI_LOC_BINPATH."`."
        );
    }

    /*
    Load toolkit
     */
    $toolkit_conf = "{$apppath}{$DS}configuration{$DS}toolkit.php";
    log_debug("Toolkit configuration path: `{$toolkit_conf}`.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if (!file_exists($toolkit_conf))
    {
        panic("Toolkit configuration not found!");
    }

    // Toolkit conf will define TOOLKIT_INIT, which will hold information on how to
    // initialize toolkit. This file will also allow toolkit to be replace by any
    // other vendor.
    include $toolkit_conf;

    // Configuration file contains tiny core loader function
    // for loading essential core files.
    $toolkit_class = toolkit_core_loader(TOOLKIT_INIT, $binpath);

    log_debug("Call initialization method.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    call_user_func_array($toolkit_class.'::__init', [$apppath, $binpath, $pubpath]);

    log_debug("Run toolkit's CLI method.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    call_user_func("{$toolkit_class}::cli", array_slice($args, 1));
}

/*
--- Utilities ------------------------------------------------------------------
 */

/**
 * Preform system check: PHP version, required extensions.
 * --
 * @return array
 *         Error message, empty if none.
 */
function self_test()
{
    $need_version = '5.6.0';
    $messages = [];

    /*
    Check if current PHP version is sufficient to proceed.
     */
    if (!(version_compare(PHP_VERSION, $need_version) >= 0))
    {
        $messages[] =
            'PHP must be at least version `'.$need_version.'` '.
            'Current version: `'.PHP_VERSION.'`';
    }

    /*
    JSON extention
     */
    if (!extension_loaded('json'))
    {
        $messages[] = 'JSON extention is required. Please enable `json`.';
    }

    /*
    Multibyte String
     */
    if (!extension_loaded('mbstring'))
    {
        $messages[] =
            'Multibyte String extention is required. Please enable `mbstring`.';
    }

    /*
    Phar
     */
    if (!extension_loaded('phar'))
    {
        $messages[] =
            'PHAR extention is required. Please enable `phar`.';
    }

    return $messages;
}

/**
 * Array list of available internal commands + help for each of them.
 * --
 * @return array
 *         [ command => help, ... ]
 */
function get_commands()
{
    return [
        '--self init'    =>
            'Initialize Mysli Toolkit in current directory.',

        '--self install' =>
            'Install this script to the `/usr/bin` directory to be always accessible. '.
            'You can use [PATH], e.g.: `mysli --self install /my/costume/path`, '.
            'to select where to be installed, default is `/usr/bin`. '.
            'You might need to be root to do this.',

        '--self remove'  =>
            'Remove this script from the current location. '.
            'You might need to be root to do this.',

        '--self update'  =>
            'Update this script. You might need to be root to do this.',

        '--self version' =>
            'Output version information.',
    ];
}

/**
 * Array list of avaiable internal variables + help for each of them.
 * --
 * @return array
 *         [ command => [ DEFINE, help ] ]
 */
function get_variables()
{
    return [
        '--self-no-colors' => [ 'MYSLI_ROOT_NO_COLORS', 'Turn off output colors.' ],
        '--self-debug'     => [ 'MYSLI_ROOT_DEBUG',     'Output debug messages.' ],
    ];
}

/**
 * Detect terminal width.
 * --
 * @return integer
 */
function terminal_width()
{
    if (!is_win())
    {
        return exec('tput cols');
    }
    else
    {
        $result = popen('mode');
        preg_match('/^ *Columns\: *([0-9]+)$/m', $result, $matches);
        return $matches[1];
    }
}
/**
 * Check if script is running in windows environment.
 * --
 * @return boolean
 */
function is_win()
{
    return strtoupper(substr(PHP_OS, 0, 3) === 'WIN');
}

/**
 * Simple popen wrapper.
 * --
 * @param string $command
 * @param string $mode
 * --
 * @return string
 */
function popen($command, $mode='r')
{
    $fp = popen($command, $mode);
    $result = stream_get_contents($fp);
    pclose($fp);

    return $result;
}

/**
 * Format list of commands.
 * --
 * @param array $commands
 * --
 * @return string
 */
function format_commands(array $commands)
{
    $longest = 0;
    $output = [];
    $term_width = terminal_width();

    foreach ($commands as $command => $_)
    {
        if (strlen($command) > $longest)
        {
            $longest = strlen($command);
        }
    }

    foreach ($commands as $command => $help)
    {
        if (is_array($help))
        {
            $help = array_pop($help);
        }

        $help = wordwrap($help, $term_width-($longest+6), "\n");
        $help = explode("\n", $help);
        $message = "    ".str_pad($command, $longest)."  {$help[0]}";
        if (count($help) > 1)
        {
            unset($help[0]);
            $help = implode("\n".str_repeat(' ', $longest+6), $help);
            $message .= "\n".str_repeat(' ', $longest+6).$help;
        }

        $output[] = $message;
    }

    return implode("\n", $output);
}

/**
 * Append ./ for relative paths. Used when saving loc file.
 * --
 * @param  string $value
 * --
 * @return string
 */
function fix_dir($value)
{
    if (substr($value, 0, 3) !== '../' && substr($value, 0, 2) !== './' &&
        substr($value, 0, 1) !== '/')
    {
        return "./{$value}";
    }
    else
    {
        return $value;
    }
}

/**
 * Attempt to create directory if not there already.
 * --
 * @param  string $name
 * @param  string $apppath
 * @param  string $realpath
 * --
 * @return string
 */
function do_dir($name, $apppath, $realpath)
{
    $path = resolve_relative($apppath, $realpath);

    if ($path[1])
    {
        if (!@is_writable($path[0]))
        {
            log_error(
                "Couldn't create `{$name}`: `{$path[1]}`, ".
                "the directory is not writable: `{$path[0]}`."
            );
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            return null;
        }

        if (!preg_match('/^[a-z0-9\/_.\-]+$/i', $path[1]))
        {
            log_error(
                "Couldn't create `{$name}`: `{$path[1]}`, ".
                "please limit your directory name to: alphanumeric with ".
                "spaces and `._-` characters."
            );
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            return null;
        }

        $path = implode('', $path);

        if (mkdir($path, 0777, true))
        {
            log_info("OK The `{$name}` was created: `{$path}`");
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        }
        else
        {
            log_error("Couldn't create `{$name}`: `{$path}`");
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            return null;
        }
    }
    else
    {
        $path = $path[0];
        log_info("OK The `{$name}` exists: `{$path}`");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }

    return $path;
}

/**
 * Resolve relative path (to be absolute).
 * This works even if (part of the) path doesn't exists.
 * Return array with two elements, first is the existing part, and second is
 * non existing path.
 * --
 * @example
 * if we have such path: /home/user/non-existing-dir/sub
 * Result will be: ['/home/user/', 'non-existing-dir/sub']
 * --
 * @param string $relative_to
 * @param string $path
 * --
 * @return array [ string $exists, string $create ]
 */
function resolve_relative($relative_to, $path)
{
    // We're dealing with absolute path
    if (substr($path, 1, 1) !== ':' && substr($path, 0, 1) !== '/')
    {
        $path =
            rtrim($relative_to, '\\/').
            DIRECTORY_SEPARATOR.
            ltrim($path, '\\/');
    }

    $existing = $path;
    $cut_off  = '';

    do
    {
        if (is_dir($existing))
        {
            break;
        }

        if ($existing === dirname($existing))
        {
            break;
        }

        $cut_off .= $cut_off . DIRECTORY_SEPARATOR . basename($existing);
        $existing = dirname($existing);

    } while (true);

    return [realpath($existing), $cut_off];
}

/**
 * Stop the script execution and print error message.
 * --
 * @param string $message
 */
function panic($message)
{
    echo "\n{!!} {$message}\n";
    exit(120);
}

/*
--- Log ------------------------------------------------------------------------
 */

/**
 * Debug message. It will be displayed only if MYSLI_ROOT_DEBUG is true.
 * --
 * @param string $message
 */
function log_debug($message)
{
    if (MYSLI_ROOT_DEBUG)
    {
        echo "\nMYSLI(debug): {$message}";
    }
}

/**
 * Print General information.
 * --
 * @param string $message
 */
function log_info($message)
{
    echo "\n{$message}";
}

/**
 * Print Error.
 * --
 * @param string $message
 */
function log_error($message)
{
    echo "\n{$message}";
}

/**
 * Print Warning.
 * --
 * @param string $message
 */
function log_warning($message)
{
    echo "\n{$message}";
}

/*
--- Save Mode Execute ----------------------------------------------------------
 */

/**
 * Initialize New Mysli System.
 * --
 * @param array $arguments
 * --
 * @return boolean
 */
function smexec_init(array $arguments)
{
    $help =
        "Mysli Platform Initialization\n\n".
        "Please execute init in the root directory of your application.\n\n".
        "The init will create `bin/` folder (if it doesn't already exists) ".
        "and acquire Mysli Toolkit automatically.\n\n".
        "NOTE: paths MUST be relative to the (current) application path.\n\n".
        "Options:\n\n".
        "    --apppath            Full absolute application path.\n".
        "    --binpath [./bin]    Binaries path (where all .phar packages are located).\n".
        "    --pubpath [./public] Publicly accessible directory.\n";

    $loc_template =
        "<?php\n\n".
        "/*\nThis file was automatically generated when system was initialized.\n */\n\n".
        "// Loc file creation timestamp\n".
        "define('MYSLI_LOC_FILE_CREATED_TIMESTAMP', '{{TIMESTAMP}}');\n".
        "define('MYSLI_LOC_FILE_UPDATED_TIMESTAMP', '{{TIMESTAMP}}');\n\n".
        "// All paths MUST be relative to the application (this file's) folder.\n\n".
        "// BINPATH is binary path, where all system .phar files are stored.\n".
        "define('MYSLI_LOC_BINPATH', '{{BINPATH}}');\n\n".
        "// PUBPATH is public path, files saved in it, will be browser accessible.\n".
        "define('MYSLI_LOC_PUBPATH', '{{PUBPATH}}');\n";

    /*
    Process arguments
    Since no `CLI` libraries are available yet, deal with arguments by hand.
    */

    // Is it help
    if (in_array('-h', $arguments) || in_array('--help', $arguments))
    {
        log_info($help);
        # ~~~~~~~~~~~~~~
        return true;
    }

    // Fetch --apppath
    $apppath_i = array_search('--apppath', $arguments);
    if ($apppath_i === false || !isset($arguments[((int)$apppath_i)+1]))
    {
        log_warning("--apppath argument is required.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        return false;
    }
    else
    {
        $apppath = $arguments[((int)$apppath_i)+1];
        log_debug("Application path is: `{$apppath}`.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }

    // Fetch --binpath
    $binpath_i = array_search('--binpath', $arguments);
    if ($binpath_i === false || !isset($arguments[((int)$binpath_i)+1]))
    {
        $binpath = './bin';
    }
    else
    {
        $binpath = $arguments[((int)$binpath_i)+1];
    }
    $r_binpath = fix_dir($binpath);
    log_debug("Bin path: `{$binpath}`, real: `{$r_binpath}`.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Fetch --pubpath
    $pubpath_i = array_search('--pubpath', $arguments);
    if ($pubpath_i === false || !isset($arguments[((int)$pubpath_i)+1]))
    {
        $pubpath = './public';
    }
    else
    {
        $pubpath = $arguments[((int)$pubpath_i)+1];
    }
    $r_pubpath = fix_dir($pubpath);
    log_debug("Public path: `{$pubpath}`, real: `{$r_pubpath}`.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    /*
    Set base variables.
     */
    $toolkit = 'mysli.toolkit';
    $is_toolkit_phar = false;

    log_info("Mysli Platform Init");
    log_debug("Checking for directories...");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    if (!@is_writable($apppath))
    {
        log_warning("Application directory must be writable `{$apppath}`.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        return false;
    }

    /*
    Resolve and create bin and public paths.
     */
    if (!($binpath = do_dir('binpath', $apppath, $r_binpath)))
    {
        return false;
    }

    if (!($pubpath = do_dir('pubpath', $apppath, $r_pubpath)))
    {
        return false;
    }

    /*
    Check if toolkit exists in the directory.
     */
    if (file_exists("{$binpath}/{$toolkit}.phar"))
    {
        $is_toolkit_phar = true;
        log_debug("Found `{$toolkit}` in `{$binpath}/{$toolkit}.phar`.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
    else
    {
        if (!file_exists("{$binpath}/{$toolkit}"))
        {
            log_error("Toolkit `{$toolkit}` not found in `{$binpath}`.");
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            return false;
        }
        else
        {
            log_debug("Found `{$toolkit}` in `{$binpath}/{$toolkit}`.");
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        }
    }

    /*
    Run toolkit setup
     */
    try
    {
        // Get dnyamic name, in came of `mysli.toolkit` it would be `toolkit`,
        // but in case of vendor.package, would be package.
        $tk_name = substr($toolkit, strrpos($toolkit, '.')+1);
        log_debug("Toolkit name: `{$tk_name}`.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        // Setup filename, different if phar.
        $toolkit_setup_file = $is_toolkit_phar
            ? "phar://{$binpath}/{$toolkit}.phar/lib/__setup.php"
            : "{$binpath}/{$toolkit}/lib/__setup.php";
        log_debug("Toolkit setup file: `{$toolkit_setup_file}`");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        // Setup file must exists.
        if (!file_exists($toolkit_setup_file))
        {
            log_error("Toolkit setup file not found: `{$toolkit_setup_file}`");
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            return false;
        }

        // Include setup file
        include $toolkit_setup_file;

        // Construct classname & namespace
        $tk_class = str_replace('.', '\\', $toolkit.".__setup");

        if (!class_exists($tk_class, false))
        {
            log_error(
                "Toolkit setup file was loaded but ".
                "it doesn't contain a valid class `{$to_class}`."
            );
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            return false;
        }

        if (!call_user_func_array(
            [$tk_class, 'enable'], [$apppath, $binpath, $pubpath]))
        {
            log_error("Toolkit setup failed, without an explanation.");
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            return false;
        }
        else
        {
            log_info("OK Toolkit setup was successful.");
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        }
    }
    catch (\Exception $e)
    {
        log_error("Toolkit setup failed, with message:\n".$e->getMessage());
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        return false;
    }

    /*
    Write mysli.loc.php file
     */
    $loc = str_replace(
        ['{{TIMESTAMP}}', '{{BINPATH}}', '{{PUBPATH}}'],
        [gmdate('c'), $r_binpath, $r_pubpath],
        $loc_template
    );

    if (!file_put_contents("{$apppath}/mysli.loc.php", $loc."\n"))
    {
        log_error("Couldn't write `loc` file to: `{$apppath}/mysli.loc.php`.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        return false;
    }
    else
    {
        log_info("OK Wrote `loc` file to: `{$apppath}/mysli.loc.php`.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }

    /*
    Done.
     */
    log_info("OK Initialization is now done. System should be usable.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return true;
}

function smexec_install(array $arguments)
{
    $path = isset($arguments[2]) ? $arguments[2] : '/usr/bin';
    $path = rtrim($path).'/mysli';

    $content = file_get_contents(__FILE__);

    if (@file_put_contents($path, $content))
    {
        log_info("Mysli was successfully installed to `{$path}`.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        if (!@chmod($path, 0755))
        {
            log_warning(
                "Can't make an executable.\n".
                "You can do it yourself: `sudo chmod +x {$path}`."
            );
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        }

        return true;
    }
    else
    {
        log_warning("Failed to install Mysli to `{$path}`. Make sure you're a root.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        return false;
    }
}

function smexec_update()
{
    log_info("Not implemented yet.");
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}

function smexec_remove()
{
    if (@unlink(__FILE__))
    {
        log_info("Mysli was successfully removed.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        return true;
    }
    else
    {
        log_warning("Failed to remove Mysli. Make sure you're a root.");
        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        return false;
    }
}

function smexec_version()
{
    log_info("Mysli Command Line Utiliy, Version ".VERSION);
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    return true;
}
