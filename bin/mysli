#!/usr/bin/env php
<?php

/**
 * Mysli Command Line Utility.
 * --
 * NOTE the SELF EXECUTION at the end!
 * --
 * @return void
 */
namespace mysli\root; class __init
{
    /**
     * Run Mysli
     * --
     * @return void
     */
    static function __run()
    {
        /*
        Set timezone to UTC temporarily
         */
        date_default_timezone_set('UTC');

        /*
        Report all errors.
         */
        error_reporting(E_ALL);
        /*
        For now display all error too, this might be changed by toolkit later.
         */
        ini_set('display_errors', true);

        /*
        Check if current PHP version is sufficient to proceed.
         */
        if (!(version_compare(PHP_VERSION, self::need_version) >= 0))
            trigger_error(
                'PHP needs to be at least version `'.self::need_version.'` '.
                'Your version: `'.PHP_VERSION.'`',
                E_USER_ERROR
            );

        /*
        Initialize Arguments and Command
         */
        $args = $_SERVER['argv'];
        $command = isset($args[1]) ? $args[1] : false;

        /*
        Discover Paths and SafeMode.
         */

        // LOC filename
        $loc = 'mysli.loc.php';

        // Get current working directory
        $cwd = rtrim(getcwd(), '\\/');

        // Set safe mode to false
        // Safe mode is situation when System is NOT initialized.
        // Either `mysli` is called from bin or from an empty directory.
        $safemode = true;

        // Apppath is CWD
        $apppath = $cwd;

        // Full current CWD to be cut down...
        $fcwd = $cwd;

        // Using CWD, Check if LOC exists anywhere down the line...
        do
        {
            // Try to find LOC in any sub-directory...
            if (file_exists("{$fcwd}/{$loc}"))
            {
                $safemode = false;
                $apppath = $fcwd;
                break;
            }

            $fcwd = dirname($fcwd);

        } while(strlen($fcwd) > 3);

        // Check if it's safe mode.
        // In such case only internal commands can be called.
        if ($safemode || $command === '--self')
        {
            if ($command === '--self')
                $command = isset($args[2]) ? $args[2] : null;

            // If there's no command, or command is -h or --help, display help
            if (!$command || $command === '-h' || $command === '--help')
            {
                print(
                    str_replace(
                        '{commands}',
                        self::format_commands(self::$commands),
                        self::safemode_messages
                    )
                );
                exit(0);
            }

            /*
            Execute command if exists.
             */

            // Check if script exists.
            if (!isset(self::$commands['--self '.$command]))
            {
                print("Invalid command! Use `-h` to see list available commands");
                exit(1);
            }

            // Prepare arguments
            $args = array_slice($args, 3);

            // Apppath needs to be set!
            if (!in_array('--apppath', $args))
                array_unshift($args, '--apppath', $apppath);

            // Execute
            $r = call_user_func(
                ['mysli\\root\\__init', "safemode_{$command}"],
                $args
            );

            print("\n");

            exit($r ? 0 : 1);
        }
        /*
        --- Standard Mode ------------------------------------------------------
         */
        else
        {
            // Read loc file
            include "{$apppath}/{$loc}";

            // There should be couple of constants available now, with relative paths.
            // From those we can load the toolkit and boot the system.

            // First check if all paths are defined.
            if (!defined('MYSLI_LOC_BINPATH'))
                trigger_error(
                    "Binary path not defined! `MYSLI_LOC_BINPATH`. ".
                    "Check `dot.loc.php` file.",
                    E_USER_ERROR
                );

            if (!defined('MYSLI_LOC_PUBPATH'))
                trigger_error(
                    "Public path not defined! `MYSLI_LOC_PUBPATH`. ".
                    "Check `dot.loc.php` file.",
                    E_USER_ERROR
                );

            // Set PUBPATH
            $pubpath = realpath($apppath.'/'.MYSLI_LOC_PUBPATH);

            if (!$pubpath)
                trigger_error(
                    "Public path not found in: `{$apppath}` looking for: `".
                    MYSLI_LOC_PUBPATH."`.",
                    E_USER_ERROR
                );

            // Set BINPATH
            $binpath = realpath($apppath.'/'.MYSLI_LOC_BINPATH);

            if (!$binpath)
                trigger_error(
                    "Binary path not found in: `{$apppath}` looking for: `".
                    MYSLI_LOC_BINPATH."`.",
                    E_USER_ERROR
                );

            /*
            Load toolkit
             */
            $toolkit_conf = "{$apppath}/configuration/toolkit.php";
            if (!file_exists($toolkit_conf))
                trigger_error(
                    "Toolkit configuration not found in `{apppath}/configuration/toolkit.php`",
                    E_USER_ERROR
                );

            // Toolkit conf will define TOOLKIT_LOAD, which will hold information on how to
            // initialize toolkit. This file will also allow toolkit to be replace by any
            // other vendor.
            include $toolkit_conf;

            // TOOLKIT_LOAD is written in format:
            // binary_name:::init_filename_to_load:::namespaced_method_to_call
            // Example: mysl.toolkit:::toolkit.init:::mysli\toolkit\toolkit_init::__init
            list($tk_bin, $tk_file, $tk_call) = explode(':::', TOOLKIT_LOAD);

            // Resolve toolkit's base directory
            if (file_exists("{$binpath}/{$tk_bin}.phar"))
                $tk_dir = "phar://{$binpath}/{$tk_bin}.phar";
            elseif (file_exists("{$binpath}/{$tk_bin}"))
                $tk_dir = "{$binpath}/{$tk_bin}";
            else
                trigger_error("Toolkit not found `{$binpath}/{$tk_bin}`.", E_USER_ERROR);

            // Toolkit file, which contains init class.
            $tk_file = "{$tk_dir}/lib/{$tk_file}.php";

            if (!file_exists($tk_file))
                trigger_error(
                    "Toolkit `init` file not found: `{$tk_file}`.",
                    E_USER_ERROR
                );

            include $tk_file;

            list($tk_class, $tk_method) = explode('::', $tk_call, 2);

            if (!class_exists($tk_class, false))
                trigger_error("Toolkit class not foun: `{$tk_class}`", E_USER_ERROR);

            // __init toolkit
            call_user_func_array($tk_call, [$apppath, $binpath, $pubpath]);

            // Run toolkit `cli`
            call_user_func("{$tk_class}::cli", array_slice($args, 1));
        }
    }

    /**
     * Handle System Init.
     * --
     * @param array $arguments
     * --
     * @return boolean
     */
    static function safemode_init(array $arguments)
    {
        /*
        Process arguments
        Since no `CLI` libraries are available yet, deal with arguments by hand.
        */

        // Is it help
        if (in_array('-h', $arguments) || in_array('--help', $arguments))
        {
            print(self::safemode_init_help);
            return true;
        }

        // Fetch --apppath
        $apppath_i = array_search('--apppath', $arguments);
        if ($apppath_i === false || !isset($arguments[((int)$apppath_i)+1]))
        {
            print("\n--apppath argument is required.\n");
            return false;
        }
        else
        {
            $apppath = $arguments[((int)$apppath_i)+1];
        }

        // Fetch --binpath
        $binpath_i = array_search('--binpath', $arguments);
        if ($binpath_i === false || !isset($arguments[((int)$binpath_i)+1]))
        {
            $binpath = './bin';
        }
        else
        {
            $binpath = $arguments[((int)$binpath_i)+1];
        }
        $r_binpath = self::fix_dir($binpath);

        // Fetch --pubpath
        $pubpath_i = array_search('--pubpath', $arguments);
        if ($pubpath_i === false || !isset($arguments[((int)$pubpath_i)+1]))
        {
            $pubpath = './public';
        }
        else
        {
            $pubpath = $arguments[((int)$pubpath_i)+1];
        }
        $r_pubpath = self::fix_dir($pubpath);

        /*
        Set base variables.
         */
        $toolkit = 'mysli.toolkit';
        $is_toolkit_phar = false;

        print("\nMysli Platform Init\n");
        print("Checking for directories...\n");

        if (!@is_writable($apppath))
        {
            print("\n!! Application directory must be writable `{$apppath}`.");
            return false;
        }

        /*
        Resolve and create bin and public paths.
         */
        if (!($binpath = self::do_dir('binpath', $apppath, $r_binpath)))
            return false;

        if (!($pubpath = self::do_dir('pubpath', $apppath, $r_pubpath)))
            return false;

        /*
        Check if toolkit exists in the directory.
         */
        if (file_exists("{$binpath}/{$toolkit}.phar"))
        {
            $is_toolkit_phar = true;
        }
        else
        {
            if (!file_exists("{$binpath}/{$toolkit}"))
            {
                print("\n!! Toolkit ({$toolkit}) not found in `{$binpath}`.");
                return false;
            }
        }
        print("\nOK `{$toolkit}`");

        /*
        Run toolkit setup
         */
        try
        {
            // Get dnyamic name, in came of `mysli.toolkit` it would be `toolkit`,
            // but in case of vendor.package, would be package.
            $tk_name = substr($toolkit, strrpos($toolkit, '.')+1);

            // Setup filename, different if phar.
            $toolkit_setup_file = $is_toolkit_phar
                ? "phar://{$binpath}/{$toolkit}.phar/lib/__setup.php"
                : "{$binpath}/{$toolkit}/lib/__setup.php";

            // Setup file must exists.
            if (!file_exists($toolkit_setup_file))
            {
                print(
                    "\n!! Toolkit setup file not found: `{$toolkit_setup_file}`"
                );
                return false;
            }

            // Include setup file
            include $toolkit_setup_file;

            // Construct classname & namespace
            $tk_class = str_replace('.', '\\', $toolkit.".__setup");

            if (!class_exists($tk_class, false))
            {
                print(
                    "\n!! Toolkit setup file was loaded ".
                    "but it doesn't contain class `{$to_class}`."
                );
                return false;
            }

            if (!call_user_func_array(
                [$tk_class, 'enable'], [$apppath, $binpath, $pubpath]))
            {
                print("\n!! Toolkit setup failed, without explanation.");
                return false;
            }
            else
            {
                print("\nOK Toolkit setup successful.");
            }
        }
        catch (\Exception $e)
        {
            print(
                "\n!! Toolkit setup failed, with message:\n".$e->getMessage()
            );
            return false;
        }

        /*
        Write mysli.loc.php file
         */
        $loc = str_replace(
            ['{{TIMESTAMP}}', '{{BINPATH}}', '{{PUBPATH}}'],
            [gmdate('c'), $r_binpath, $r_pubpath],
            self::loc_template
        );

        if (!file_put_contents("{$apppath}/mysli.loc.php", $loc."\n"))
        {
            print(
                "\n!! Couldn't write `loc` file to: `{$apppath}/mysli.loc.php`."
            );
            return false;
        }
        else
        {
            print("\nOK Wrote `loc` file to: `{$apppath}/mysli.loc.php`.");
        }

        /*
        Done.
         */
        print("\nOK Initialization is now done. System should be usable.");
        return true;
    }

    static function safemode_install()
    { echo "\nNot implemented yet.\n"; }

    static function safemode_update()
    { echo "\nNot implemented yet.\n"; }

    static function safemode_remove()
    { echo "\nNot implemented yet.\n"; }

    /*
    --- Private ----------------------------------------------------------------
     */

    /**
     * Return a string of nicely formatted commands + help.
     * --
     * @param array $commands
     * --
     * @return string
     */
    private static function format_commands(array $commands)
    {
        $longest = 0;
        $output = [];

        foreach ($commands as $command => $_)
        {
            if (strlen($command) > $longest)
                $longest = strlen($command);
        }

        foreach ($commands as $command => $help)
        {
            $help = wordwrap($help, 75-($longest+6));
            $help = explode("\n", $help);
            $message = "    ".str_pad($command, $longest)."  {$help[0]}";
            if (count($help) > 1)
            {
                unset($help[0]);
                $help = implode("\n".str_repeat(' ', $longest+6), $help);
                $message .= $help;
            }

            $output[] = $message;
        }

        return implode("\n", $output);
    }

    /**
     * Append ./ for relative paths. Used when saving loc file.
     * --
     * @param  string $value
     * --
     * @return string
     */
    private static function fix_dir($value)
    {
        if (substr($value, 0, 3) !== '../' && substr($value, 0, 2) !== './' &&
            substr($value, 0, 1) !== '/')
        {
            return "./{$value}";
        }
        else
        {
            return $value;
        }
    }

    /**
     * Attempt to create directory if not there already.
     * --
     * @param  string $name
     * @param  string $apppath
     * @param  string $realpath
     * --
     * @return string
     */
    private static function do_dir($name, $apppath, $realpath)
    {
        $path = self::resolve_relative($apppath, $realpath);

        if ($path[1])
        {
            if (!@is_writable($path[0]))
            {
                print(
                    "\n!! Couldn't create `{$name}`: `{$path[1]}`, ".
                    "the directory is not writable: `{$path[0]}`."
                );
                return null;
            }

            if (!preg_match('/^[a-z0-9\/_.\-]+$/i', $path[1]))
            {
                print(
                    "\n!! Couldn't create `{$name}`: `{$path[1]}`, ".
                    "please limit your directory name to: alphanumeric with ".
                    "spaces and `._-` characters."
                );
                return null;
            }

            $path = implode('', $path);

            if (mkdir($path, 0777, true))
            {
                print("\nOK The `{$name}` was created: `{$path}`");
            }
            else
            {
                print("\n!! Couldn't create `{$name}`: `{$path}`");
                return null;
            }
        }
        else
        {
            $path = $path[0];
            print("\nOK The `{$name}` exists: `{$path}`");
        }

        return $path;
    }

    /**
     * Resolve relative path (to be absolute).
     * This works even if (part of the) path doesn't exists.
     * Return array with two elements, first is the existing part, and second is
     * non existing path.
     * --
     * @example
     * if we have such path: /home/user/non-existing-dir/sub
     * Result will be: ['/home/user/', 'non-existing-dir/sub']
     * --
     * @param string $relative_to
     * @param string $path
     * --
     * @return array [ string $exists, string $create ]
     */
    private static function resolve_relative($relative_to, $path)
    {
        // We're dealing with absolute path
        if (substr($path, 1, 1) !== ':' && substr($path, 0, 1) !== '/')
        {
            $path =
                rtrim($relative_to, '\\/').
                DIRECTORY_SEPARATOR.
                ltrim($path, '\\/');
        }

        $existing = $path;
        $cut_off  = '';

        do
        {
            if (is_dir($existing))
            {
                break;
            }

            if ($existing === dirname($existing))
            {
                break;
            }

            $cut_off .= $cut_off . DIRECTORY_SEPARATOR . basename($existing);
            $existing = dirname($existing);

        } while (true);

        return [realpath($existing), $cut_off];
    }

    /*
    --- Constants --------------------------------------------------------------
     */

    /*
    At least this version is needed to proceed.
     */
    const need_version = '5.6.0';

    /*
    List of available self- commands
     */
    private static $commands = [
        '--self init'    =>
            'Initialize Mysli Toolkit in current directory.',

        '--self install' =>
            'Install this script to the `/usr/bin` directory to be always accessible. '.
            'You can use [PATH], e.g.: `mysli --self install /my/costume/path`, '.
            'to select where to be installed, default is `/usr/bin`.'.
            'You need to be root to do this.',

        '--self remove'  =>
            'Remove this script from the current location. '.
            'You need to be root to do this.',

        '--self update'  =>
            'Update this script. You need to be root to do this.'
    ];

    /*
    Help message to be displayed in CLI.
     */
    const safemode_messages = "
Command Line for Mysli Platform

If you'd like to mange initialized application, please execute `mysli` from root directory of that application.

Usage: mysli --self <command> [options...]

You can always use mysli <command> -h to get help for a specific command.

Please note, this is a safe mode, only commands which are related to this utility are available.

List of available commands:

{commands}\n";

    /*
    LOC file template
     */
    const loc_template = <<<'LOC'
<?php

/*
This file was automatically generated when system was initialized.
 */

// Loc file creation timestamp
define(
    'MYSLI_LOC_TIMESTAMP',
    '{{TIMESTAMP}}'
);

// All paths MUST be relative to the application (this file's) folder.
//
// BINPATH is binary path, where all system .phar files are stored.
define('MYSLI_LOC_BINPATH', '{{BINPATH}}');
// PUBPATH is public path, files saved in it, will be browser accessible.
define('MYSLI_LOC_PUBPATH', '{{PUBPATH}}');
// TMPPATH is temp path, where temporary files will be saved.
LOC;

    /*
    Command line help text.
     */
    const safemode_init_help = <<<'HELP'

Mysli Platform Initialization

Please execute init in the root directory of your application.

The init will create `bin/` folder (if it doesn't already exists) and acquire Mysli Toolkit automatically.

NOTE: paths MUST be relative to the (current) application path.

Options:

    --apppath            Full absolute application path.
    --binpath [./bin]    Binaries path (where all .phar packages are located).
    --pubpath [./public] Publicly accessible directory.

HELP;

} \mysli\root\__init::__run();
