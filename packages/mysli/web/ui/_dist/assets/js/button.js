// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mysli.web.ui.button = (function(_super) {
    var template, ui;

    __extends(button, _super);

    template = '<button class="ui-button ui-widget" />';

    ui = mysli.web.ui;


    /*
    @param {mixed}  label   label(string) | options(object)
    @param {object} options if label provided,
                            this parameter can be used for options
     */

    function button(label, options) {
      if (options == null) {
        options = {};
      }
      if (typeof label === 'string') {
        options.label = label;
      } else {
        options = label;
      }
      this.options = ui.util.merge_options(options, {
        label: null,
        icon: null,
        icon_position: ui["const"].LEFT,
        icon_spin: false,
        style: ui["const"].STYLE_DEFAULT,
        style_flat: false
      });
      button.__super__.constructor.call(this, this.options);
      this.elements.push($(template));
      ui.util.apply_options(this.options, this, {
        set_label: 'label',
        set_icon: ['icon', 'icon_position', 'icon_spin'],
        set_style: ['style', 'style_flat'],
        set_disabled: 'disabled'
      });
    }


    /*
    Set button's label
    @param {string} label
     */

    button.prototype.set_label = function(label) {
      var label_element, method;
      label_element = this.get_element().find('span.label');
      if (!label) {
        label_element.remove();
        return;
      }
      if (!label_element.length) {
        label_element = $('<span class="label" />');
        method = this.options.icon_position === ui["const"].RIGHT ? 'prepend' : 'append';
        this.get_element()[method](label_element);
      }
      return label_element.text(label);
    };


    /*
    Get button's label
    @returns {string}
     */

    button.prototype.get_label = function() {
      return this.get_element().find('span.label').text();
    };


    /*
    Set button's icon. Use false to remove icon.
    @param {string}  icon check font-aswesome for available icons
    @param {string}  position ui.const.LEFT ui.const.RIGHT
    @param {boolean} spin weather icon should be animated (spin)
     */

    button.prototype.set_icon = function(icon, position, spin) {
      var icons, method;
      if (spin == null) {
        spin = false;
      }
      icons = this.get_element().find('i.fa');
      icons.remove();
      if (!icon) {
        return;
      }
      method = position === ui["const"].RIGHT ? 'append' : 'prepend';
      spin = spin ? 'fa-spin' : '';
      return this.get_element()[method]($("<i class=\"fa fa-" + icon + " " + spin + "\" />"));
    };


    /*
    Set button's style
    @param {string}  style default|alt|primary|confirm|attention
    @param {boolean} flat weather this button is flat (no brders, etc...)
     */

    button.prototype.set_style = function(style, flat) {
      var current_style;
      if (style == null) {
        style = 'default';
      }
      if (flat == null) {
        flat = false;
      }
      current_style = "style-" + (this.get_style());
      this.get_element().removeClass(current_style);
      if (flat) {
        this.get_element().addClass('style-flat');
      } else {
        this.get_element().removeClass('style-flat');
      }
      return this.get_element().addClass((function() {
        switch (style) {
          case ui["const"].STYLE_DEFAULT:
            return 'style-default';
          case ui["const"].STYLE_ALT:
            return 'style-alt';
          case ui["const"].STYLE_PRIMARY:
            return 'style-primary';
          case ui["const"].STYLE_CONFIRM:
            return 'style-confirm';
          case ui["const"].STYLE_ATTENTION:
            return 'style-attention';
          default:
            throw new Error("Invalid style: `" + style + "`");
        }
      })());
    };


    /*
    Get button's style
    @returns {string}
     */

    button.prototype.get_style = function() {
      var class_name, classes, _i, _len;
      classes = this.get_element()[0].className.split(' ');
      for (_i = 0, _len = classes.length; _i < _len; _i++) {
        class_name = classes[_i];
        if (class_name.substr(0, 6) === 'style-' && class_name !== 'style-flat') {
          return class_name.substr(6);
        }
      }
    };

    return button;

  })(mysli.web.ui.widget);

}).call(this);
