// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mysli.web.ui.panel_container = (function(_super) {
    var template, util;

    __extends(panel_container, _super);

    util = mysli.web.ui.util;

    template = '<div class="ui-widget ui-panel-container" />';

    function panel_container() {
      panel_container.__super__.constructor.apply(this, arguments);
      this.elements.push($(template));
      this.container.master = this.container.target = this.elements[0];
      this.sum_size = 0;
      this.expandable_count = 0;
      this.active_id = false;
      this.offseted = 0;
      this.container_width = 0;
      this.set_parent('body');
      this.set_resize_with_window(true);
      this.set_size_from_dom_element(window);
    }


    /*
    Update sum size, when panel is added, remove or away
    @param {integer} value  positive or negative
    @param {string}  modify_before_id if provided, panels before this id, will
                                      update position to fit difference.
     */

    panel_container.prototype.update_sum = function(value, modify_before_id) {
      if (modify_before_id == null) {
        modify_before_id = false;
      }
      this.sum_size = this.sum_size + value;
      if (modify_before_id) {
        return this.each_after(modify_before_id, function(index, panel) {
          panel.get_element().css('z-index', 10000 - index);
          panel.properties.position = panel.properties.position + value;
          panel.animate();
        });
      }
    };


    /*
    Update view when panel is added/removed or window is resized.
     */

    panel_container.prototype.update_view = function() {
      var active_panel, offset_so_far, overflow, overflow_part, overflow_percent, panel_calculated, screen_left;
      if (!this.active_id) {
        return;
      }
      overflow = this.container_width - this.sum_size;
      overflow_part = this.expandable_count > 0 ? Math.ceil(overflow / this.expandable_count) : 0;
      active_panel = this.get(this.active_id);
      screen_left = this.container_width - active_panel.get_size().width;
      overflow_percent = 100 - util.get_percent(screen_left, this.sum_size - active_panel.get_size().width);
      offset_so_far = 0;
      panel_calculated = 0;
      if (overflow_part <= 0) {
        overflow_part = overflow;
      }
      if (overflow > 0) {
        overflow_percent = 0;
        this.offseted = false;
      } else {
        this.offseted = true;
      }
      return this.each(function(index, panel) {
        var diff;
        if (panel.get_away() && !panel.get_focus()) {
          panel.properties.expanded_for = 0;
          panel.properties.offset = -(panel.get_size().width - panel.properties.away_width + offset_so_far);
          panel.animate();
          offset_so_far = offset_so_far + panel.get_size().width - panel.properties.away_width;
          return;
        }
        if (panel.properties.expandable) {
          if (overflow > 0) {
            panel.properties.offset = -offset_so_far;
            panel.properties.expanded_for = overflow_part;
            panel.animate();
            offset_so_far += -overflow_part;
            return;
          } else {
            panel.properties.expanded_for = 0;
            panel.animate();
          }
        }
        if (panel.get_focus()) {
          panel.properties.expanded_for = 0;
          panel.properties.offset = -offset_so_far;
          panel.animate();
          return;
        }
        panel_calculated = util.set_percent(overflow_percent, panel.get_size().width);
        if (panel.properties.min_size && panel.get_size().width + panel.properties.expanded_for > panel.properties.min_size) {
          if (panel.properties.min_size > panel.get_size().width - panel_calculated) {
            diff = panel_calculated - (panel.get_size().width - panel.properties.min_size);
            panel.properties.expanded_for = -diff;
            panel.properties.offset = -(panel_calculated - diff + offset_so_far);
            panel.animate();
            offset_so_far += panel_calculated;
            return;
          } else {
            panel.properties.expanded_for = -panel_calculated;
            panel.properties.offset = -offset_so_far;
            panel.animate();
            offset_so_far += panel_calculated;
            return;
          }
        }
        panel.properties.expanded_for = 0;
        panel.properties.offset = -(panel_calculated + offset_so_far);
        panel.animate();
        offset_so_far += panel_calculated;
      });
    };


    /*
    Will push a new panel to the collection.
    @param {object} panel
     */

    panel_container.prototype.push = function(panel) {
      panel_container.__super__.push.call(this, panel, panel.get_id());
      return this.push_after(false, panel);
    };


    /*
    Will push  new panel to the collection after particular ID.
    @param {string} after_id
    @param {object} panel
     */

    panel_container.prototype.push_after = function(after_id, panel) {
      var index, size;
      if (!panel instanceof mysli.web.ui.panel) {
        throw new Error('An object must be instance of `mysli.web.ui.panel`');
      }
      if (after_id) {
        size = this.get(after_id).get_size().width;
        this.each_before(after_id, function(index, ipanel) {
          ipanel.get_element().css('z-index', 10000 - index);
          return size += ipanel.get_size().width;
        });
        panel.properties.position = size;
      } else {
        panel.properties.position = this.sum_size;
      }
      this.update_sum(panel.get_size().width);
      panel.get_element().css({
        opacity: 0,
        left: (panel.properties.position + panel.properties.offset) - (panel.get_size().width + panel.properties.expanded_for)
      });
      if (after_id) {
        panel_container.__super__.push_after.call(this, after_id, panel, panel.get_id());
        this.get(after_id).get_element().css('z-index', 10000 - this.get_index(after_id));
      }
      index = this.get_index(panel.get_id());
      panel.get_element().css('z-index', 10000 - index);
      panel.connect('focus-change', this.switch_focus.bind(this));
      panel.set_focus(true);
      if (panel.get_expandable()) {
        this.expandable_count++;
      }
      return panel.animate();
    };

    panel_container.prototype.remove = function(id) {
      var new_panel, panel, width;
      panel = this.get(id);
      width = panel.get_size().width;
      if (panel.get_expandable()) {
        this.expandable_count--;
      }
      this.update_sum(-width, id);
      if (id === this.active_id) {
        this.active_panel = false;
        new_panel = this.get_from(id, -1);
        new_panel.set_focus(true);
      } else {
        this.update_view();
      }
      return panel_container.__super__.remove.call(this, id);
    };


    /*
    Element will resize according to window resize
    @param {boolean} status
    @param {integer} timeout
     */

    panel_container.prototype.set_resize_with_window = function(status, timeout) {
      if (timeout == null) {
        timeout = 500;
      }
      if (status) {
        return $(window).on('resize', (function(_this) {
          return function() {
            if (_this.resize_timer) {
              clearTimeout(_this.resize_timer);
            }
            return _this.resize_timer = setTimeout(_this.set_size_from_dom_element.bind(_this, window), timeout);
          };
        })(this));
      } else {
        if (this.resize_timer) {
          return clearTimeout(this.resize_timer);
        }
      }
    };


    /*
    Set element's size to DOM element's size
    @param {string} selector
     */

    panel_container.prototype.set_size_from_dom_element = function(selector) {
      var height, width;
      width = $(selector).outerWidth();
      height = $(selector).outerHeight();
      this.set_size({
        width: width,
        height: height
      });
      this.container_width = width;
      return this.update_view();
    };


    /*
    Remove old focus, and set new
    @param {boolean} status
    @param {object}  panel
     */

    panel_container.prototype.switch_focus = function(status, panel) {
      if (status === true) {
        if (this.active_id !== false) {
          this.get(this.active_id).set_focus(false);
        }
        this.active_id = panel.get_id();
        return this.update_view();
      }
    };

    return panel_container;

  })(mysli.web.ui.container);

}).call(this);
