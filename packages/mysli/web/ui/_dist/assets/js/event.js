// Generated by CoffeeScript 1.8.0
(function() {
  mysli.web.ui.event = (function() {
    function event() {
      this.events_counter = 0;
      this.events = {};
    }


    /*
    Trigger an event
    @param {string} event
    @param {array}  params
     */

    event.prototype.trigger = function(event, params) {
      var call, id, _results;
      if (params == null) {
        params = [];
      }
      if (typeof this.events[event] === 'undefined') {
        throw new Error("Invalid event id: `" + event + "`");
      }
      if (typeof params.push !== 'function') {
        params = [params];
      }
      params.push(this);
      _results = [];
      for (id in this.events[event]) {
        if (!this.events[event].hasOwnProperty(id)) {
          continue;
        }
        call = this.events[event][id];
        if (typeof call === 'function') {
          _results.push(call.apply(this, params));
        } else {
          throw new Error("Invalid type of callback: `" + id + "`");
        }
      }
      return _results;
    };


    /*
    Connect callback with an event
    @param   {string}   event [event*id]
                        id can be assigned, to disconnect all events
                        with that id, by calling: disconnect('*id')
    @param   {function} callback
    @returns {string}   id
     */

    event.prototype.connect = function(event, callback) {
      var id, _ref;
      _ref = this.extract_event_name(event), event = _ref[0], id = _ref[1];
      if (typeof this.events[event] === 'undefined') {
        throw new Error("No such event available: `" + event + "`");
      }
      this.events_counter++;
      id = "" + id + event + "--" + this.events_counter;
      this.events[event][id] = callback;
      return id;
    };


    /*
    Disconnect particular event
    @param   {string} id full id, or specified unique id (eg *my_id)
             {array}  [event, id] to disconnect specific event
    @returns {boolean}
     */

    event.prototype.disconnect = function(id) {
      var eid, event;
      if (typeof id !== 'object' && id.substr(0, 1) === '*') {
        id = id + "*";
        for (event in this.events) {
          for (eid in this.events[event]) {
            if (eid.substr(0, id.length) === id) {
              delete this.events[event][eid];
            }
          }
        }
        return true;
      } else {
        if (typeof id !== 'object') {
          event = id.split('--', 2)[0];
        } else {
          event = id[0];
          id = id[1];
        }
        if (typeof this.events[event] !== 'undefined') {
          return delete this.events[event][id];
        } else {
          return false;
        }
      }
    };


    /*
    Process event*special_id and return an array
    @param   {string} event
    @returns {array}  [event, id]
     */

    event.prototype.extract_event_name = function(event) {
      var id;
      if (event.indexOf("*") > 0) {
        id = event.split("*", 2);
        event = id[0];
        id = "*" + id[1] + "*";
      } else {
        id = '';
      }
      return [event, id];
    };

    return event;

  })();

}).call(this);
