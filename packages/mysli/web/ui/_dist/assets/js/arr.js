// Generated by CoffeeScript 1.8.0
(function() {
  mysli.web.ui.arr = (function() {
    function arr() {
      this.stack = {};
      this.ids = [];
    }


    /*
    Push an element to the end of array
    @param {string} id
    @param {mixed} element
    @returns {integer} inserted index
     */

    arr.prototype.push = function(id, element) {
      this.stack[id] = element;
      this.ids.push(id);
      return this.ids.length - 1;
    };


    /*
    Pust an element after particular element
    @param {string} after_id
    @param {string} id
    @param {mixed}  element
    @returns {integer} inserted index
     */

    arr.prototype.push_after = function(after_id, id, element) {
      var index_to;
      index_to = this.get_index(after_id) + 1;
      this.stack[id] = element;
      this.ids.splice(index_to, 0, id);
      return index_to;
    };


    /*
    Remove particular element by id
    @param {string} id
     */

    arr.prototype.remove = function(id) {
      delete this.stack[id];
      return this.ids.splice(this.get_index(id), 1);
    };


    /*
    Get index of particular element by id
    @param {string} id
    @returns {integer}
     */

    arr.prototype.get_index = function(id) {
      var ide, _i, _len, _ref;
      if (typeof this.ids.indexOf !== 'function') {
        _ref = this.ids;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ide = _ref[_i];
          if (ide === id) {
            return ide;
          }
        }
      } else {
        return this.ids.indexOf(id);
      }
    };


    /*
    Get index n positions from id
    @param {string} id
    @param {integer} step
    @returns {integer}
     */

    arr.prototype.get_index_from = function(id, step) {
      id = this.get_index(id);
      if (id !== false && id > 0) {
        return id + step;
      }
    };


    /*
    Get element by id
    @param {string} id
    @returns {mixed}
     */

    arr.prototype.get = function(id) {
      if (typeof this.stack[id] !== 'undefined') {
        return this.stack[id];
      } else {
        return false;
      }
    };


    /*
    Get element n positions from id
    @param {string} id
    @param {integer} step
    @returns {mixed}
     */

    arr.prototype.get_from = function(id, step) {
      id = this.get_index_from(id, step);
      if (id !== false) {
        return this.get(this.ids[id]);
      } else {
        return false;
      }
    };


    /*
    Number of elements
    @returns {integer}
     */

    arr.prototype.count = function() {
      return this.ids.length;
    };


    /*
    Get last element
    @returns {mixed}
     */

    arr.prototype.get_last = function() {
      return this.stack[this.ids[this.ids.length - 1]];
    };


    /*
    Execute function for each element.
    function (index, element)
    break if function return any value (+ return that value)
    @param {function} callback
    @returns {mixed}
     */

    arr.prototype.each = function(callback) {
      var id, r, _i, _len, _ref;
      _ref = this.ids;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        r = callback(id, this.stack[id]);
        if (r !== void 0) {
          return r;
        }
      }
    };


    /*
    Execute function for each element, after particular id
    function (index, element)
    break if function return any value (+ return that value)
    @param {string} id
    @param {function} callback
    @returns {mixed}
     */

    arr.prototype.each_after = function(id, callback) {
      var i, r;
      i = this.get_index(id);
      while (i < this.ids.length) {
        r = callback(i, this.stack[this.ids[i]]);
        if (r !== void 0) {
          return r;
        } else {
          i++;
        }
      }
    };


    /*
    Execute function for each element, before particular id
    function (index, element)
    break if function return any value (+ return that value)
    @param {string} id
    @param {function} callback
    @returns {mixed}
     */

    arr.prototype.each_before = function(id, callback) {
      var i, r;
      i = 0;
      while (i < this.get_index(id)) {
        r = callback(i, this.stack[this.ids[i]]);
        if (r !== void 0) {
          return r;
        } else {
          i++;
        }
      }
    };

    return arr;

  })();

}).call(this);
