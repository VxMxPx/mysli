// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mysli.web.ui.label = (function(_super) {
    var template, ui;

    __extends(label, _super);

    ui = mysli.web.ui;

    template = '<label class="ui-widget ui-label" />';

    function label(text, options) {
      if (options == null) {
        options = {};
      }
      if (typeof text === 'string') {
        options.text = text;
      } else {
        options = text;
      }
      this.options = ui.util.merge_options(options, {
        text: null,
        for_id: null
      });
      label.__super__.constructor.apply(this, arguments);
      this.elements.push($(template));
      ui.util.apply_options(this.options, this, {
        set_for_id: 'for_id',
        set_text: 'text'
      });
    }


    /*
    Set label for particular form element
    @param {string} id
     */

    label.prototype.set_for_id = function(id) {
      this.options.for_id = id;
      return this.get_element().attr('for', id);
    };


    /*
    Get ID of form element, for which label is set
    @returns {string}
     */

    label.prototype.get_for_id = function() {
      return this.options.for_id;
    };


    /*
    Set label's text
    @param {string} text
     */

    label.prototype.set_text = function(text) {
      this.options.text = text;
      return this.get_element().text(text);
    };


    /*
    Get label's text
    @returns {string}
     */

    label.prototype.get_text = function() {
      return this.options.text;
    };

    return label;

  })(mysli.web.ui.widget);

}).call(this);
