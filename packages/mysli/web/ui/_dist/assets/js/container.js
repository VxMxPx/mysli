// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  mysli.web.ui.container = (function(_super) {
    var ui;

    __extends(container, _super);

    ui = mysli.web.ui;

    function container() {
      container.__super__.constructor.apply(this, arguments);
      this.events.add = {};
      this.events.remove = {};
      this.container = {
        icounter: 0,
        master: null,
        target: null,
        stack: {},
        ids: []
      };
    }


    /*
    Push a new widget to the end of container
    @param   {object} widget
    @param   {string} id to access element later, if not provided, it will be
    automatically generated.
    @returns {object} widget
     */

    container.prototype.push = function(widget, id) {
      if (id == null) {
        id = null;
      }
      widget.parent = this;
      widget.trigger('added', [this]);
      this.trigger('add', [widget]);
      if (!id) {
        id = this.get_new_id();
      }
      widget.connect('destroyed*container.add', (function(_this) {
        return function() {
          return _this.remove(id);
        };
      })(this));
      widget.get_element().addClass("contained-widget-" + id);
      if (this.container.target) {
        this.container.target.append(widget.get_element());
      } else {
        throw new Error("Target is undefined!");
      }
      this.container.stack[id] = widget;
      this.container.ids.push(id);
      return widget;
    };


    /*
    Pust a widget after particular id
    @param   {string} after_id
    @param   {object} widget
    @param   {string} id
    @returns {object} widget
     */

    container.prototype.push_after = function(after_id, widget, id) {
      var index_to;
      if (id == null) {
        id = null;
      }
      if (!id) {
        id = this.get_new_id();
      }
      index_to = this.get_index(after_id) + 1;
      widget.parent = this;
      widget.trigger('added', [this]);
      this.trigger('add', [widget]);
      widget.connect('destroyed*container.add', (function(_this) {
        return function() {
          return _this.remove(id);
        };
      })(this));
      widget.get_element().addClass("contained-widget-" + id);
      if (this.container.target) {
        this.container.target.append(widget.get_element());
      } else {
        throw new Error("Target is undefined!");
      }
      this.container.stack[id] = widget;
      this.container.ids.splice(index_to, 0, id);
      return widget;
    };


    /*
    Remove an widget from a container
    @param {string} id string
     */

    container.prototype.remove = function(id) {
      var widget;
      widget = this.get(id);
      this.trigger('remove', [widget]);
      if (!widget.destroyed) {
        widget.trigger('removed', [this]);
        widget.disconnect('*container.add');
      }
      widget.parent = false;
      delete this.container.stack[id];
      this.container.ids.splice(this.get_index(id), 1);
      return this.get_element().find(".contained-widget-" + id).remove();
    };


    /*
    Get widget by id.
    @param   {string} id
    @returns {mixed} object|false
     */

    container.prototype.get = function(id) {
      if (typeof this.container.stack[id] !== 'undefined') {
        return this.container.stack[id];
      } else {
        return false;
      }
    };


    /*
    Get index of particular widget by id
    @param   {string} id
    @returns {integer}
     */

    container.prototype.get_index = function(id) {
      var ide, _i, _len, _ref;
      if (typeof this.container.ids.indexOf !== 'function') {
        _ref = this.container.ids;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ide = _ref[_i];
          if (ide === id) {
            return ide;
          }
        }
      } else {
        return this.container.ids.indexOf(id);
      }
    };


    /*
    Get index n positions from id
    @param {string} id
    @param {integer} step
    @returns {integer}
     */

    container.prototype.get_index_from = function(id, step) {
      id = this.get_index(id);
      if (id !== false && id > 0) {
        return id + step;
      }
    };


    /*
    Get widget n positions from id
    @param   {string} id
    @param   {integer} step
    @returns {mixed}
     */

    container.prototype.get_from = function(id, step) {
      id = this.get_index_from(id, step);
      if (id !== false) {
        return this.get(this.container.ids[id]);
      } else {
        return false;
      }
    };


    /*
    Number of widgets
    @returns {integer}
     */

    container.prototype.count = function() {
      return this.container.ids.length;
    };


    /*
    Get last widget
    @returns {mixed}
     */

    container.prototype.get_last = function() {
      return this.container.stack[this.container.ids[this.container.ids.length - 1]];
    };


    /*
    Execute function for each widget.
    function (index, widget)
    break if function return any value (+ return that value)
    @param   {function} callback
    @returns {mixed}
     */

    container.prototype.each = function(callback) {
      var id, r, _i, _len, _ref;
      _ref = this.container.ids;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        r = callback(id, this.container.stack[id]);
        if (r !== void 0 && r !== null) {
          return r;
        }
      }
    };


    /*
    Execute function for each widget, after particular id
    function (index, widget)
    break if function return any value (+ return that value)
    @param   {string} id
    @param   {function} callback
    @returns {mixed}
     */

    container.prototype.each_after = function(id, callback) {
      var i, r;
      i = this.get_index_from(id, 1);
      while (i < this.container.ids.length) {
        r = callback(i, this.container.stack[this.container.ids[i]]);
        if (r !== void 0 && r !== null) {
          return r;
        } else {
          i++;
        }
      }
    };


    /*
    Execute function for each element, before particular id
    function (index, element)
    break if function return any value (+ return that value)
    @param   {string} id
    @param   {function} callback
    @returns {mixed}
     */

    container.prototype.each_before = function(id, callback) {
      var i, r;
      i = 0;
      while (i < this.get_index(id)) {
        r = callback(i, this.container.stack[this.container.ids[i]]);
        if (r !== void 0 && r !== null) {
          return r;
        } else {
          i++;
        }
      }
    };


    /*
    Generate new unique ID for this container's element.
    @returns {string}
     */

    container.prototype.get_new_id = function() {
      this.container.icounter++;
      return "aid-" + this.container.icounter;
    };

    return container;

  })(mysli.web.ui.widget);

}).call(this);
