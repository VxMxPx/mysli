<?php

namespace Mysli;

class TemplateParser
{
    // Collection of loaded file
    protected $loaded = [];

    // Absolute template's directory, to resolve relative paths.
    protected $absolute_path = null;

    // Collection of all variables
    protected $variables = [];

    // Master file template, if required. It will be extracted automatically,
    // if you used tag: {master('filename.html')} in your template.
    protected $master = false;

    // Regions will be assigned automatically, if you used {region('name')}
    // in your template.
    protected $regions = [];

    // Variables hard-coded to template ....
    protected $static_variables = [];

    // Fache filename, autogenerated
    protected $cache_filename = '';

    /**
     * Construct new template. This won't render it!
     * --
     * @param string $absolute_path
     */
    public function __construct($absolute_path=null, array $variables=array())
    {
        $this->absolute_path = $absolute_path;
        $this->variables = $variables;
    }

    /**
     * Render a template file, and return the result.
     * This will ignore cache.
     * --
     * @param  string $path      -- Relative e.g. login.html or absolute path.
     * @param  array  $variables -- Collection of variables to be passed to template.
     * --
     * @return string
     */
    public function render($path, $variables=array())
    {
        if (!empty($variables) && is_array($variables)) { array_merge($this->variables, $variables); }

        $template = $this->get_file($path);

        // Update processed & return
        return $this->parse($template);
    }

    /**
     * Render a template file, and send the result to the output.
     * This will also create cached version of file.
     * --
     * @param  string $path      -- Relative e.g. login.html or absolute path.
     * @param  array  $variables -- Collection of variables to be passed to template.
     * --
     * @return void
     */
    public function render_to_output($path, $variables=array())
    {
        // Cache filename
        $filename             = ds($this->absolute_path, $path);
        $this->cache_filename = $this->cache_generate_filename($filename);

        if (!empty($variables) && is_array($variables)) { array_merge($this->variables, $variables); }

        if (Cfg::get('template_engine/disable_cache') || !$this->cache_has()) {
            $this->cache_write($this->render($path));
        }

        Output::add($this->execute(), '/mysli/template_parser::render_to_output' . $filename);
    }

    /**
     * Will eval the template...
     * --
     * @return string
     */
    protected function execute()
    {
        if (!$this->cache_has($this->cache_filename)) {
            Log::warn("Cannot find cache template: `{$this->cache_filename}`.", __FILE__, __LINE__);
            return false;
        }

        if (!empty($this->variables)) {
            foreach($this->variables as $var => $val) {
                $$var = $val;
            }
        }

        ob_start();
            include(dat_path('/cache/templates/'.$this->cache_filename));
            $result = ob_get_contents();
        ob_end_clean();

        return $result;
    }

    /**
     * Will clear all items from cache...
     * --
     * @return void
     */
    public static function cache_clear()
    {

    }

    /**
     * Generate unique filename for cache.
     * --
     * @return string
     */
    protected function cache_generate_filename($full_path)
    {
        return md5($full_path) . '_' . basename($full_path) . '.php';
    }

    /**
     * Load template from cache.
     * --
     * @return string
     */
    protected function  cache_get()
    {
        if (!$this->cache_has($this->cache_filename)) {
            Log::warn("Cannot find cache template: `{$this->cache_filename}`.", __FILE__, __LINE__);
            return false;
        }

        return file_get_contents(dat_path('/cache/templates/'.$this->cache_filename));
    }

    protected function cache_has()
    {
        return file_exists(dat_path('/cache/templates/'.$this->cache_filename));
    }

    protected function cache_write($contents)
    {
        return file_put_contents(dat_path('/cache/templates/'.$this->cache_filename), $contents);
    }

    /**
     * Load a file from relative or absolute location.
     * --
     * @param  string $filename
     * --
     * @return string
     */
    protected function get_file($filename)
    {
        if (isset($this->loaded[$filename])) {
            return $this->loaded[$filename];
        }

        // Do we have absolute path yet?
        if (!$this->absolute_path) {
            $this->extract_absolute($filename);
        }

        if (strpos(ds($filename), DIRECTORY_SEPARATOR) === false) {
            $filename = $this->resolve_relative($filename);
        }

        if (!file_exists($filename)) {
            trigger_error("Template file not found: `{$filename}`!", E_USER_ERROR);
        }

        return ($this->loaded[$filename] = file_get_contents($filename));
    }

    /**
     * Resolve relative path of template.
     * --
     * @param  string $filename
     * --
     * @return string -- Absolute path
     */
    protected function resolve_relative($filename)
    {
        return ds($this->absolute_path, $filename);
    }

    /**
     * Extract the absolute path from the filename,
     * and assign it to: $this->absolute_path
     * --
     * @param  string $filename
     * --
     * @return void
     */
    protected function extract_absolute($filename)
    {
        $this->absolute_path = realpath(dirname($filename));
    }

    /**
     * Return list of static variables to be added on top of template...
     * --
     * @return string
     */
    protected function get_static_variables()
    {
        $output = '';
        if (!empty($this->static_variables)) {
            foreach ($this->static_variables as $var => $value) {
                $output .= $var . ' = ' . $value . ";\n";
            }
        }

        if ($output) {
            $output =
            preg_replace_callback('/\$_MYSLI_QUOT__AA0_(.*?)_0BB/', function ($match) {
                return base64_decode($match[1]);
            }, $output);
            return "<?php\n{$output}?>";
        } else {
            return '';
        }
    }

    /**
     * Process the template (string).
     * --
     * @param  string $template
     * @param  array  $variables
     * --
     * @return string
     */
    public function parse($template)
    {
        /* ---------------------------------------------------------------------
         * All small items to be escaped
         */
        $template = preg_replace('/\\\{/', '_MYSLI_EQ_START', $template);
        $template = preg_replace('/\\\}/', '_MYSLI_EQ_ENDED', $template);
        $template = preg_replace("/\\\'/", '_MYSLI_EQ_APOST', $template);

        /* ---------------------------------------------------------------------
         * Raw Regions
         */
        $template =
        preg_replace_callback('/\{ *raw *\}(.*?)\{ *endraw *\}/ms', function ($match) {
            $raw = trim($match[1]);
            if ($raw) {
                return '_MYSLI_RAW_' . base64_encode($raw) . '_WARDNE';
            } else {
                return;
            }
        }, $template);

        /* ---------------------------------------------------------------------
         * Comments....
         */
        $template =
        preg_replace_callback('/\{\*.*?\*\}/ms', function ($match) {
            return '';
        }, $template);

        /* ---------------------------------------------------------------------
         * Include?
         */
        $template =
        preg_replace_callback('/\{ *include\((.*?)\) *\}/', function ($match) {
            return $this->render(trim($match[1], "'"));
        }, $template);

        /* ---------------------------------------------------------------------
         * Master?
         */
        $template =
        preg_replace_callback('/\{ *master\((.*?)\) *\}/', function ($match) {
            $this->master = trim($match[1], "'");
            return null;
        }, $template);

        /* ---------------------------------------------------------------------
         * Find Regions
         */
        $template =
        preg_replace_callback('/\{ *region\((.*?)\) *\}(.*?)\{ *endregion *\}/ms', function ($match) {
            $the_name = trim($match[1], "'");
            $this->regions[$the_name] = trim($match[2]);
            return '';
        }, $template);

        /* ---------------------------------------------------------------------
         * Yield
         */
        $template =
        preg_replace_callback('/\{ *yield\((.*?)\) *\}/', function ($match) {
            $region = trim($match[1], "'");
            if (!$region) {
                return '_MYSLI_YIELD';
            } else {
                if (isset($this->regions[$region])) {
                    return $this->regions[$region];
                } else {
                    return '';
                }
            }
        }, $template);

        /* ---------------------------------------------------------------------
         * Protect everything wrapped in ''
         */
        $template =
        preg_replace_callback("/'.*?'/", function ($match) {
            return '$_MYSLI_QUOT__AA0_' . base64_encode($match[0]) . '_0BB';
        }, $template);

        /* ---------------------------------------------------------------------
         * Find functions
         */
        $template =
        preg_replace_callback('/(\$[\w\d_=]*([\w\d_\-\[\]]*)?)((\.([\w\d_]*)\((.*?)?\))+)/i', function ($match) {
            $variable  = str_replace(['[', ']'], ['[\'', '\']'], $match[1]);
            preg_match_all('/(\.([\w\d_]*)\((.*?)?\))/i', $match[3], $functions, PREG_SET_ORDER);

            $result = '';

            foreach ($functions as $func) {
                if (!$result) {
                    $args = $variable;
                } else {
                    $args = $result;
                }
                $args   = $args . ($func[3] ? ', ' . $func[3] : '');
                $result = '\\Mysli\\Template\\' . $func[2] . '(' . $args . ')';
            }

            return $result;
        }, $template);

        /* ---------------------------------------------------------------------
         * Variables in statements
         */
        $template =
        preg_replace_callback('/\$[\w\d_]+(\[[\w\d_]+\])+/', function ($match) {
            return str_replace(['[', ']'], ['[\'', '\']'], $match[0]);
        }, $template);

        /* ---------------------------------------------------------------------
         * Normal functions
         */
        $template =
        preg_replace_callback('/\{ *([\w\d_]+)\((.*?)\) *\}/', function ($match) {
            return '<?php echo \\Mysli\\Template\\' . trim($match[1]) . '(' . $match[2] . '); ?>';
        }, $template);

        /* ---------------------------------------------------------------------
         * Functions, namespaced
         */
        $template =
        preg_replace_callback('/\{ *(\\\\[\w\d_\\\\]+)\((.*?)\) *\}/', function ($match) {
            return '<?php echo ' . trim($match[1]) . '(' . $match[2] . '); ?>';
        }, $template);

        /* ---------------------------------------------------------------------
         * Normal variables
         */
        $template =
        preg_replace_callback('/\{ *(\$[\w\d_\[\]\']+) *\}/', function ($match) {
            return '<?php echo ' . $match[1] . '; ?>';
        }, $template);

        /* ---------------------------------------------------------------------
         * Assign variables
         */
        $template =
        preg_replace_callback('/\{ *(\$[\w\d_\[\]\']+) *\=(.*?)\}/', function ($match) {
            /*return '<?php ' . $match[1] . ' = ' . trim($match[2]) . '; ?>';*/
            $this->static_variables[trim($match[1])] = trim($match[2]);
            return '';
        }, $template);

        /* ---------------------------------------------------------------------
         * If, elseif
         */
        $template =
        preg_replace_callback('/\{ *(else)?if *(.*?)\}/', function ($match) {
            return '<?php ' . $match[1] . 'if (' . trim($match[2]) . '): ?>';
        }, $template);

        /* ---------------------------------------------------------------------
         * Short if / else
         */
        $template =
        preg_replace_callback('/\{(.*?\?.*?\:.*?)\}/', function ($match) {
            return '<?php echo (' . trim($match[1]) . '); ?>';
        }, $template);

        /* ---------------------------------------------------------------------
         * Else, endif, endfor
         */
        $template =
        preg_replace_callback('/\{ *(else|endif|endfor) *\}/', function ($match) {
            $match = trim($match[1]);
            if     ($match === 'endfor') { $match = 'endforeach;'; }
            elseif ($match === 'else')   { $match = 'else:'; }
            else                         { $match = $match . ';'; }

            return '<?php ' . $match . ' ?>';
        }, $template);

        /* ---------------------------------------------------------------------
         * Restore all small items
         */
        $template = preg_replace('/_MYSLI_EQ_START/', '{', $template);
        $template = preg_replace('/_MYSLI_EQ_ENDED/', '}', $template);
        $template = preg_replace('/_MYSLI_EQ_APOST/', "'", $template);

        /* ---------------------------------------------------------------------
         * For
         */
        $template =
        preg_replace_callback('/\{ *for \$([\w\d_]+) in (.*?)}/', function ($match) {

            $varname = trim($match[1]);
            $collection = trim($match[2]);

            return '<?php
            $'.$varname.'_position = -1;
            $'.$varname.'_is_odd   = true;
            $'.$varname.'_is_even  = false;
            $'.$varname.'_collection  = ' . $collection . ';
            $'.$varname.'_length      = count($'.$varname.'_collection);
            foreach ($' . $varname . ' => $'.$varname.'_collection):
                $'.$varname.'_position++;
                $'.$varname.'_is_first = !!($'.$varname.'_position === 0);
                $'.$varname.'_is_last = !!($'.$varname.'_position === $'.$varname.'_length - 1);
                $'.$varname.'_is_odd   = !$'.$varname.'_is_odd;
                $'.$varname.'_is_even  = !$'.$varname.'_is_even;
            ?>';
        }, $template);

        /* ---------------------------------------------------------------------
         * Restore Raw Regions
         */
        $template =
        preg_replace_callback('/_MYSLI_RAW_(.*?)_WARDNE/', function ($match) {
            return base64_decode($match[1]);
        }, $template);

        /* ---------------------------------------------------------------------
         * Restore everything wrapped in ''
         */
        $template =
        preg_replace_callback('/\$_MYSLI_QUOT__AA0_(.*?)_0BB/', function ($match) {
            return base64_decode($match[1]);
        }, $template);

        /* ---------------------------------------------------------------------
         * Language key
         */
        $template =
        preg_replace_callback('/\{ *\#([A-Z0-9_\-]+)(, .*?)? *\}/', function ($match) {
            return '<?php echo \\Mysli\\Template\\l(\'' . trim($match[1]) . '\'' . (isset($match[2]) ? trim($match[2]) : '') . '); ?>';
        }, $template);

        /* ---------------------------------------------------------------------
         * Return template &| master
         */
        $template = trim($template);

        if ($this->master) {
            $master = $this->master;
            $this->master = false; // Infinite loop otherwise
            $master = $this->render($master);
            $master = str_replace('_MYSLI_YIELD', $template, $master);
            return $this->get_static_variables() . $master;
        } else {
            return $template;
        }
    }
}