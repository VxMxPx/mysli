#!/usr/bin/php
<?php

class Dot
{
    private $pubpath;
    private $libpath;
    private $datpath;

    public function __construct($libpath, $datpath, $pubpath)
    {
        $this->libpath = $libpath;
        $this->pubpath = $pubpath;
        $this->datpath = $datpath;
    }

    private function get_library($name, array $libraries)
    {
        $match_lib   = false;
        $match_class = false;

        foreach ($libraries as $lib_name => $lib_meta) {
            if (preg_match('/.*?\/'.$name.'/i', $lib_name)) {
                $match_lib = $lib_name;
                if (isset($lib_meta['class'])) {
                    $match_class = $lib_meta['class'];
                } else {
                    $match_class = explode('/', $lib_name);
                    $match_class = '\\' . ucfirst($match_class[0]) .
                                   '\\' . ucfirst($match_class[1]);
                }
                break;
            }
        }

        if (!$match_lib) {
            trigger_error(
                "Library ({$name}) is not enabled, cannot proceed!",
                E_USER_ERROR);
        }

        $lib_path = str_replace('/',
                                DIRECTORY_SEPARATOR,
                                $this->libpath.'/'.$match_lib.'/'.$name.'.php');

        if (!file_exists($lib_path)) {
            trigger_error("Cannot find file: `{$lib_path}`", E_USER_ERROR);
        }
        include($this->libpath.'/'.$match_lib.'/'.$name.'.php');
        return $match_class;
    }

    public function init()
    {
        /*
         * Set the timezone to UTC temporarily.
         */
        date_default_timezone_set('UTC');

        /*
         * How the errors supposed to be reported?
         */
        error_reporting(E_ALL);
        ini_set('display_errors', true);

        /*
         * I suppose we'll need at least PHP version 5.4, but if you're using only
         * non-standard components, with backward compatibility, then feel free to
         * comment this section out.
         */
        if (!function_exists('version_compare')) {
            $this->out_error('The function "version_compare" was not found.');
            return false;
        }
        if (!(version_compare(PHP_VERSION, '5.4.0') >= 0)) {
            $this->out_error('PHP needs to be at least version 5.4.0 Your version: '
                        . PHP_VERSION);
            return false;
        }

        if (!$this->libpath || !$this->pubpath || !$this->datpath ||
            !is_dir($this->libpath) || !is_dir($this->pubpath) || !is_dir($this->datpath)) {
            $this->out_warn("Invalid public or data path.\n".
                "Data path: {$this->datpath}\n".
                "Public path: {$this->pubpath}");
            return false;
        }

        // Get libraries file
        $lib_registry = realpath($this->datpath.'/core/libraries.json');
        if (!$lib_registry || !file_exists($lib_registry)) {
            trigger_error(
                "Libraries registry not found ({$lib_registry}), cannot locate core!",
                E_USER_ERROR);
        }
        $libraries = file_get_contents($lib_registry);
        $libraries = json_decode($libraries, true);

        $core_class = $this->get_library('core', $libraries);
        $core_class::init($this->pubpath, $this->libpath, $this->datpath);

        $dot_class = $this->get_library('dot', $libraries);
        return new $dot_class();
    }

}

/*
 * Set some basic paths, which will be passed to the core.
 * pubpath - Public URL accessible path, where index.php is stored.
 * libpath - Libraries repository.
 * datpath - Data(base) path, where most of the application specific files will
 *           be stored. This path shouldn't be accessible through URL!
 */
if (count($_SERVER['argv']) < 2) {
    $libpath = realpath(dirname(__FILE__));
    $datpath = realpath($libpath.'/../data');
    $pubpath = realpath($libpath.'/../public');
} else {
    $libpath = realpath(dirname(__FILE__));
    $datpath = realpath($libpath.'/'.$_SERVER['argv'][1]);
    $pubpath = realpath($libpath.'/'.$_SERVER['argv'][2]);
}

// Construct, init and run the Dot ---------------------------------------------
$dot = new Dot($libpath, $datpath, $pubpath);
$dot->init()->run();